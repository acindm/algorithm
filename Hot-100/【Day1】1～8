笔者较熟悉python，但因转方向需求会逐步过渡到使用js语言
【哈希】
【1-两数之和】
https://leetcode.cn/problems/two-sum/description/?envType=study-plan-v2&envId=top-100-liked
使用爆破的时间复杂度是n^2，空间复杂度是1。用哈希表的做法，空间换时间，时间复杂度和空间复杂度都是n。

var twoSum = function(nums, target){
    let map = new Map();
    for(let i = 0; i < nums.length; i++){
        if (map.has(target - nums[i])){
            return [map.get(target - nums[i]), i];
        }else{
            map.set(nums[i], i)
        }
    }
    return [];
};

var twoSum = function(nums, target){
    let map = new Map();
    for(let i = 0; i < nums.length; i++){
        if (map.has(target - nums[i])){
            return [map.get(target - nums[i]), i];
        }else{
            map.set(nums[i], i)
        }
    }
    return [];
};


【49-字母异位词分组】
https://leetcode.cn/problems/group-anagrams/submissions/579466705/?envType=study-plan-v2&envId=top-100-liked
时间复杂度：O(n * m log m)，其中 n 是字符串数组的长度，m 是字符串的平均长度。
空间复杂度：O(n * m)，主要来源于 Map 中存储的分组数据，以及字符串处理时的临时存储。

var groupAnagrams = function(strs){
    let map = new Map()
    for (let i = 0; i < strs.length; i++){
    let str = strs[i].split('').sort().join()
    if(map.has(str)){
        let temp = map.get(str)
        temp.push(strs[i])
        map.set(str, temp)
    }else{
        map.set(str, [strs[i]])
    }
}
return [...map.values()]
};

【128-最长连续序列】
https://leetcode.cn/problems/longest-consecutive-sequence/submissions/579473238/?envType=study-plan-v2&envId=top-100-liked
时间复杂度：O(n)
空间复杂度：O(n)

var longestConsecutive = function(nums) {    
    let numSet = new Set(nums), maxCount = 0;
    for (let num of numSet) {
        if (!numSet.has(num - 1)) {
            let curNum = num;
            let curLength = 1;
            while (numSet.has(curNum + 1)) {
                curNum += 1;
                curLength += 1;
            }
            maxCount = Math.max(maxCount, curLength);
        }
    }
    return maxCount;
};

【双指针】
【183-移动零】