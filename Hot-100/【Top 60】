// 【1】【无重复字符的最长字串】【中】
// -输出最长子串长度

var lengthOfLongestSubstring = function(s){
    let i = 0; res = 0; n = 0
    for(let j = 0; j<s.length; j++){
        n = s.slice(i,j).indexOf(s[j])
        if (n==-1){
            res = Math.max(res, j+1-i)
        }else{
            i += n + 1
        }
    }
    return res
}

// -输出最长字串
var lengthOfLongestSubstring = function(s){
    let map = new map()
    let i = 0, res = 0, start = 0
    for(let j=0;j<s.length;j++){
        if (Map.has(s[j]) && map.get(s[j]) >=i ){
            i = map.get(s[j]) + 1
        }
        map.set(s[j], j)
        if (j-i+1>res){
            res = j-i+1
            start=i
        }
    }
    console.log(s.slice(start, start+res))
    return res
}

// 【2】【合并两个有序数组】【易】
var merge = function(nums1, m, nums2, n) {
    let i =m-1, j=n-1, k=m+n-1
    while (i>=0 && j>=0){
        if (nums1[i] < nums2[j]){
            nums1[k] = nums2[j--]
        }else{
            nums1[k] = nums1[i--]
        }
        k--
    }
    while(i>=0) nums1[k--] = nums1[i--]
    while(j>=0) nums1[k--] = nums2[j--]
}



//二分查找
var search = function(nums, target) {
    if (nums == null || !nums.length){
        return -1
    }
    let left = 0, right = nums.length - 1
    while (left <= right){
        let mid = left +((right - left) >> 1)
        if (nums[mid] == target){
            return mid;
        }else if (nums[mid] > target){
            right = mid - 1
        }else{
            left = mid + 1
        }
    }
    return -1
};